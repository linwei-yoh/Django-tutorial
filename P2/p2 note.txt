
1.设置数据库
project/settings.py 是django的模块级的变量设置文件
默认情况下 数据库使用 SQLite。
如果希望更改数据库，需要安装适当的数据库绑定。
并且在setting文件中，DATABASES 'default'项下，ENGINE和NAME两项的设定。
ENGINE 选择数据库
NAME   数据库的名字 包含绝对路径

如果不是使用sqlite，那么还需要添加例如USER PASSWORD HOST之类的字段。


2.设置时区
project/settings.py 下的TIME_ZONE字段用与时区设定
If you’re running Django on Windows, TIME_ZONE must be set to match the system time zone.
默认设置为 UTC  世界协调时间
国内可设置为Asia/Shanghai 作为北京时间

启用 USE_TZ = True 后，处理时间方面，有两条 “黄金法则”：
	保证存储到数据库中的是 UTC 时间；
	在函数之间传递时间参数时，确保时间已经转换成 UTC 时间；

USE_TZ字段用于决定是否使用TIME_ZONE
Django如果开启了Time Zone功能，则所有的存储和内部处理，甚至包括直接print显示全都是UTC的。只有通过模板进行表单输入/渲染输出的时候，才会执行UTC本地时间的转换。

所以建议后台处理时间的时候，最好完全使用UTC，不要考虑本地时间的存在。而显示时间的时候，也避免手动转换，尽量使用Django模板系统代劳。

例如：
    from django.utils.timezone import utc
    now = datetime.datetime.utcnow().replace(tzinfo=utc)
    timediff = now - object1.created
    object1.just_created = True if timediff.days < 1 else False

{% if object1.just_created %}
{{ object1.created|date:"H:i:s" }}
{% else %}
{{ object1.created|date:"Y-m-d H:i:s" }}
{% endif %}

datetime.datetime.utcnow()输出不带时区的UTC时间 被称为naive time
django.utils.timezone.now()输出带时区的utc时间，称为active time
如果要把utc时间转化为北京时间可以如下处理
	datetime.datetime.utcnow().replace(tzinfo=pytz.utc).astimezone(pytz.timezone('Asia/Shanghai'))

3.INSTALLED_APPS
project/settings.py 下INSTALLED_APPS包含Django的数个框架。
部分框架至少用到1个数据库的表，为了使用它们必须优先建立一个数据库中的表。
需要执行 python manage.py migrate
此命令查询3.INSTALLED_APPS设置，根据数据库的设置创造所有必须的表。


4.creating models
Django follows the DRY Principle.
